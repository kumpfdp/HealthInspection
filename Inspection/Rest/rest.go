// Package inspect provides an interface to health inspection data.
package rest

import (
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"log"
	"net/http"
	"strconv"
	"strings"
	"time"

	query "github.com/kumpfdp/HealthInspection/Query"
)

// Inspection is a health inspection activity.
// Auto-generated by https://mholt.github.io/json-to-go/.
type RestInspection struct {
	ActionDate           string `json:"action_date"`
	ActionSequence       string `json:"action_sequence"`
	ActionStatus         string `json:"action_status"`
	Address              string `json:"address"`
	BusinessName         string `json:"business_name"`
	City                 string `json:"city"`
	Code                 string `json:"code"`
	InspSubtype          string `json:"insp_subtype"`
	InspType             string `json:"insp_type"`
	LastTableUpdate      string `json:"last_table_update"`
	Latitude             string `json:"latitude"`
	LicenseNo            string `json:"license_no"`
	LicenseStatus        string `json:"license_status"`
	Longitude            string `json:"longitude"`
	PhoneNumber          string `json:"phone_number"`
	PostalCode           string `json:"postal_code"`
	RecordnumInsp        string `json:"recordnum_insp"`
	RecordnumLicense     string `json:"recordnum_license"`
	State                string `json:"state"`
	ViolationComments    string `json:"violation_comments"`
	ViolationDescription string `json:"violation_description"`
	ViolationKey         string `json:"violation_key"`
}

// Inspections is an array of inspections.
type RestInspections []RestInspection

// Summarize provides a brief summary of the given inspection.
func (i *RestInspection) Summarize() string {
	const tpl string = `On %s, %s had an inspection resulting in "%s"`
	return fmt.Sprintf(tpl, i.ActionDate, i.BusinessName, i.ActionStatus)
}

// MapURL provides a URL to the location of the inspection.
func (i *RestInspection) MapURL() string {
	const zoom = 17
	const tpl string = `http://www.openstreetmap.org/?mlat=%s&mlon=%s#map=%d/%s/%s`
	return fmt.Sprintf(tpl, i.Latitude, i.Longitude, zoom, i.Latitude, i.Longitude)
}

// InspectionRepository provides access to health inspection records.
type RestInspectionRepository interface {

	// Name for this repository instance.
	Name() string

	// GetAll returns a list of all health inspections.
	GetAll() (RestInspections, error)
}

// Package cincyfsp provides an interace to data provided by the Cincinnati
// Food Safety Program.

const (
	apiURL = "https://data.cincinnati-oh.gov/resource/2c8u-zmu9.json"

	defaultTimeout = 30 * time.Second
	defaultLimit   = 10
)

var (
	_ RestInspectionRepository = &RestInspectionRepositoryImpl{}

	// Custom errors.
	errAPIFailure    = errors.New("API did not return expected 200 HTTP OK")
	errNegativeLimit = errors.New("limit must not be negative")
)

// RestInspectionRepository provides access to health inspection records via the
// Cincinnati Food Service API.
type RestInspectionRepositoryImpl struct {
	name   string
	client *http.Client
	limit  int
	token  string
	query  query.Query
}

var defaultRepository = RestInspectionRepositoryImpl{
	name:   "Default Repository",
	client: &http.Client{Timeout: defaultTimeout},
	limit:  defaultLimit,
}

// Name of this repository instance.
func (s *RestInspectionRepositoryImpl) Name() string {
	return s.name
}

// GetAll returns all known health inspections.
func (s *RestInspectionRepositoryImpl) GetAll() (RestInspections, error) {

	req, err := http.NewRequest("GET", apiURL, nil)
	if err != nil {
		return nil, err
	}

	if s.token != "" {
		log.Println("Using supplied API token.")
		req.Header.Add("X-API-Token", s.token)
	}

	q := req.URL.Query()

	/*
	 * TODO
	 * Use s.query to customize the query here.
	 */
	s.query.Print()

	if s.limit > 0 {
		if s.query.BusinessName() != "" {
			q.Add("business_name", s.query.BusinessName())
		}
		if s.query.Address() != "" {
			q.Add("address", s.query.Address())
		}
		if s.query.City() != "" {
			q.Add("city", s.query.City())
		}
		if s.query.State() != "" {
			q.Add("state", s.query.State())
		}
		q.Add("$limit", strconv.Itoa(s.limit))
	}
	req.URL.RawQuery = q.Encode()

	res, err := s.client.Do(req)
	if err != nil {
		return nil, err
	}

	defer res.Body.Close()

	if res.StatusCode != 200 {
		return nil, errAPIFailure
	}

	var aa RestInspections

	d := json.NewDecoder(res.Body)
	for err := d.Decode(&aa); err != nil && err != io.EOF; {
		return nil, err
	}

	return aa, nil
}

// RestInspectionRepositoryOption is a function that takes an inspection
// repository and augments it.  Uses the functional option pattern as
// popularized by Dave Cheney.
type RestInspectionRepositoryOption func(*RestInspectionRepositoryImpl) error

// WithName sets the name of the repository instance.
func WithName(name string) RestInspectionRepositoryOption {
	return func(s *RestInspectionRepositoryImpl) error {
		s.name = name
		return nil
	}
}

// WithToken sets the token used to authenticate against the API.
func WithToken(token string) RestInspectionRepositoryOption {
	return func(s *RestInspectionRepositoryImpl) error {
		s.token = token
		return nil
	}
}

// WithTimeout sets the maximum time a request can take before giving up.
func WithTimeout(timeout time.Duration) RestInspectionRepositoryOption {
	return func(s *RestInspectionRepositoryImpl) error {
		s.client.Timeout = timeout
		return nil
	}
}

// WithLimit sets the limit on the number of inspections that will be
// returned.
func WithLimit(limit int) RestInspectionRepositoryOption {
	return func(s *RestInspectionRepositoryImpl) error {
		if limit < 0 {
			return errNegativeLimit
		}
		s.limit = limit
		return nil
	}
}

// WithClient sets the HTTP client used for transport.
func WithClient(client *http.Client) RestInspectionRepositoryOption {
	return func(s *RestInspectionRepositoryImpl) error {
		s.client = client
		return nil
	}
}

// WithQuery sets the query
func WithQuery(q query.Query) RestInspectionRepositoryOption {
	return func(s *RestInspectionRepositoryImpl) error {
		s.query = q
		return nil
	}
}

// WithExampleData replaces the HTTP client with a mock transport that returns
// example data.
func WithExampleData() RestInspectionRepositoryOption {
	return WithClient(&http.Client{Transport: newMockTransport()})
}

type mockTransport struct{}

func newMockTransport() http.RoundTripper {
	return &mockTransport{}
}

func (t *mockTransport) RoundTrip(req *http.Request) (res *http.Response, err error) {

	resBody := `
  [{
    "action_date": "2013-10-10T00:00:00.000",
    "action_sequence": "A012642688",
    "action_status": "Not Abated",
    "address": "1801 RACE ST",
    "business_name": "\"KROEGER & SONS MEATS\"",
    "city": "CINCINNATI",
    "code": "3717-1-03.4(C)",
    "insp_subtype": "STANDARD INSPECTION",
    "insp_type": "ROUTINE",
    "last_table_update": "2015-03-05T21:56:43.000",
    "latitude": "39.1154039286902",
    "license_no": "RFE-008760-C3S",
    "license_status": "PAID",
    "longitude": "-84.5184463268576",
    "phone_number": "513 651-5543",
    "postal_code": "45202",
    "recordnum_insp": "CFSI131698",
    "recordnum_license": "H200801025",
    "state": "OH",
    "violation_comments": "\"A BOX OF FROZEN PORK PRODUCT WAS LEFT ON THE FLOOR IN THE CUSTOMER SERVICE AREA BY A DELIVERY DRIVER.  UPON BRINGING THIS TO THE EMPLOYEES ATTENTION, THE PRODUCT WAS MOVED TO THE WALK IN COOLER.\"",
    "violation_description": "\"3717-1-03.4(C)  - Violation - Thawing TCS - Temperature & Time ControlTCS food was improperly thawed.\"",
    "violation_key": "HLE130775V"
	}]`

	res = &http.Response{
		Header:     make(http.Header),
		Request:    req,
		StatusCode: http.StatusOK,
	}
	res.Body = ioutil.NopCloser(strings.NewReader(resBody))

	return res, nil
}

// NewRepository returns a new inspection repository with the default HTTP
// client.
func NewRestRepository(opts ...RestInspectionRepositoryOption) (*RestInspectionRepositoryImpl, error) {
	repo := defaultRepository
	for _, opt := range opts {
		err := opt(&repo)
		if err != nil {
			return nil, err
		}
	}
	return &repo, nil
}
